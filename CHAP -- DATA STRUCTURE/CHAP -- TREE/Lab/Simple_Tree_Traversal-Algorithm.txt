Tree traversal is a fundamental concept in computer science, referring to the process of visiting each node in a tree data structure exactly once. There are three primary types of tree traversal:

1. Inorder Traversal:
    - Visit left subtree
    - Visit root node
    - Visit right subtree
2. Preorder Traversal:
    - Visit root node
    - Visit left subtree
    - Visit right subtree
3. Postorder Traversal:
    - Visit left subtree
    - Visit right subtree
    - Visit root node

Tree traversal has numerous applications in computer science, including:
1. Searching: Finding a specific node in the tree.
2. Insertion: Adding a new node to the tree.
3. Deletion: Removing a node from the tree.
4. Tree manipulation: Modifying the tree structure.
5. Data retrieval: Extracting data from the tree.
6. Algorithms: Tree traversal is used in various algorithms, such as:
    - Binary search trees
    - AVL trees
    - Red-black trees
    - Depth-first search (DFS)
    - Breadth-first search (BFS)

Tree traversal is essential in various domains, including:
1. File systems: Directory structures
2. Database indexing: Indexing data for efficient querying
3. Compilers: Parsing syntax trees
4. Webpage navigation: Traversing the DOM tree
5. Social network analysis: Traversing relationships between nodes


// Algorithm for Tree Traversal
1.  Define a structure for a tree node with data and pointers to left and right children.
2.  Create functions for:
    *   Inorder Traversal: Traverse left subtree, visit root, traverse right subtree.
    *   Preorder Traversal: Visit root, traverse left subtree, traverse right subtree.
    *   Postorder Traversal: Traverse left subtree, traverse right subtree, visit root.
3.  Create a sample binary tree for testing.
4.  Call the traversal functions to print the node values.
