-- Algorithm for Postfix Evaluation
1. Create an empty stack.
2. Scan the postfix expression from left to right.
3. If the scanned character is an operand (a number), push it onto the stack.
4. If the scanned character is an operator (+, -, *, /), pop two operands from the stack, apply the operator, and push the result back onto the stack.
5. Repeat steps 3-4 until the entire expression is scanned.
6. The final result is the last element left on the stack.


Note:
- When popping operands from the stack, the first popped operand is the first operand of the operator, and the 	second popped operand is the second operand.
- Be sure to handle errors, such as stack underflow (when popping from an empty stack) or invalid input.

Example:
Postfix expression: "34+2*"

1. Create an empty stack.
2. Scan from left to right:
    - '3' is an operand, push onto stack: [3]
    - '4' is an operand, push onto stack: [3, 4]
    - '+' is an operator, pop two operands, apply +, and push result: [7]
    - '2' is an operand, push onto stack: [7, 2]
    - '*' is an operator, pop two operands, apply *, and push result: [14]
3. The final result is the last element left on the stack: 14
